{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0},{"_id":"themes/apollo/source/bloglogo.png","path":"bloglogo.png","modified":0}],"Cache":[{"_id":"source/_posts/20160215_如何计算 Steam 游戏总价？.md","shasum":"9009b459556bac540982e7bcd2e86c09cf89ee84","modified":1455523806803},{"_id":"source/_posts/hello-world.md","shasum":"033b7dee8d954eb7d53198f98ce991e76217ac78","modified":1452766925221},{"_id":"themes/apollo/LICENSE","shasum":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1452758124708},{"_id":"themes/apollo/README.md","shasum":"ee179bad009e0a0d1795d25b31cf591a9342dab5","modified":1452758124708},{"_id":"themes/apollo/_config.yml","shasum":"32e74c7e8ec40237c0b90a46a103d18941343fc9","modified":1452854117918},{"_id":"themes/apollo/doc/custom-blocks.md","shasum":"78e9400714d0ff7c9b272d3ccc80fb18c3bf208f","modified":1452758124708},{"_id":"themes/apollo/gulpfile.babel.js","shasum":"bab2bbe4543fa2d096b06488c1c62494535eaa72","modified":1452758124708},{"_id":"themes/apollo/layout/index.jade","shasum":"58c451042cad5beeb5a76852bba609c651ff3428","modified":1452758124708},{"_id":"themes/apollo/layout/mixins/paginator.jade","shasum":"510ee0ba37b4522cca6c6204d641809454ba3ac6","modified":1452758124708},{"_id":"themes/apollo/layout/mixins/post.jade","shasum":"37411bb13470bbfdb78b300ad4feffd2a2737086","modified":1452758124708},{"_id":"themes/apollo/layout/partial/comment.jade","shasum":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1452758124708},{"_id":"themes/apollo/layout/partial/head.jade","shasum":"2ed7b73ad13b184e2bda9c80ba078ea33bbbbe4d","modified":1452758124708},{"_id":"themes/apollo/layout/partial/layout.jade","shasum":"d9c4f8933f6740f5159713ec69ab943db5fb7cae","modified":1452758124708},{"_id":"themes/apollo/layout/partial/nav.jade","shasum":"c35d3061da4b053b73150d9741c542d660798270","modified":1452758124708},{"_id":"themes/apollo/layout/partial/scripts.jade","shasum":"4c83fec1e2fc5cffefafc2e31835e28122c0fdfd","modified":1452758124708},{"_id":"themes/apollo/layout/post.jade","shasum":"7593ff041af04c387c457417237d9ab9e3cb467d","modified":1452758124708},{"_id":"themes/apollo/package.json","shasum":"a872d0158d522612ccc0b300bdf27d0228de8428","modified":1452758124708},{"_id":"themes/apollo/source/css/apollo.css","shasum":"5f6dc2c541b331c016eb479a4cffc79992f0ead7","modified":1452758124708},{"_id":"themes/apollo/source/favicon.png","shasum":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/base.scss","shasum":"88b361e68475caddbab763feed5e1db788ac2cd7","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/footer.scss","shasum":"60cf365489c0d93cd7e9f10eedd4aee702e1ef27","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/header.scss","shasum":"d24cc6520f3faa7bb80610b858a92639eadcc289","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/mq.scss","shasum":"0b9c7097136ac8e4a07d9702fc4dbe0345ac7596","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","shasum":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/post.scss","shasum":"04746e3d6bc1de08c46b09be812b310e14ab1acc","modified":1452758124708},{"_id":"themes/apollo/source/scss/_partial/posts.scss","shasum":"92858015b8f3dcb4eb91b6dc41563b7aaa91b376","modified":1452758124708},{"_id":"themes/apollo/source/scss/apollo.scss","shasum":"f8b40223ea647b7c5627c344ead5c1a493bdd576","modified":1452758124708},{"_id":"themes/apollo/source/bloglogo.png","shasum":"6c5d88e1587ed9cf055521bb7bf206031003ed76","modified":1452854092890},{"_id":"public/scss/apollo.scss","modified":1455523675722,"shasum":"f8b40223ea647b7c5627c344ead5c1a493bdd576"},{"_id":"public/favicon.png","modified":1455523675729,"shasum":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c"},{"_id":"public/css/apollo.css","modified":1455523675733,"shasum":"5f6dc2c541b331c016eb479a4cffc79992f0ead7"},{"_id":"public/bloglogo.png","modified":1455523675739,"shasum":"6c5d88e1587ed9cf055521bb7bf206031003ed76"},{"_id":"public/2016/02/15/20160215_如何计算 Steam 游戏总价？/index.html","modified":1455523809930,"shasum":"982fde0d327ac0c08f711ded414dcbebbbd0ff65"},{"_id":"public/2016/01/14/hello-world/index.html","modified":1455523676294,"shasum":"860b3a2be32fdf0228a983dca40b1472fd742c5b"},{"_id":"public/archives/index.html","modified":1455523676420,"shasum":"e27f16ff02a44d56db2c9c7d224e3290bb9dd11d"},{"_id":"public/archives/2016/index.html","modified":1455523676498,"shasum":"e27f16ff02a44d56db2c9c7d224e3290bb9dd11d"},{"_id":"public/archives/2016/01/index.html","modified":1455523676582,"shasum":"e0999b80c21863d7fca87c7a1a29fcb914e3693d"},{"_id":"public/archives/2016/02/index.html","modified":1455523676653,"shasum":"21a81cd7bf2f8ce72009e7517d394023022e9526"},{"_id":"public/atom.xml","modified":1455523810395,"shasum":"5e881999de0e8385a5ad9cac8557cfff8c7f4b9e"},{"_id":"public/index.html","modified":1455523676754,"shasum":"075741319a3beac7881fcd71ceefe0194b3844c1"},{"_id":"public/sitemap.xml","modified":1455523810473,"shasum":"4bd1156ea121f66f0ac34e8f2231e3d60030d866"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"买下 Steam 所有游戏要花多少钱？","_content":"\n先来看效果展示：[买下 Steam 所有游戏要花多少钱？](http://steamtuhao.com)。\n\n## 背景\n\n最近 Steam 玩得比较多，早晨突然想到一个有趣的问题：买下 Steam 所有游戏要花多少钱？\n\n去 Google 了一下，发现国外有个网站做了计算，但是 2014 年底就停止更新了。研究了一下代码和 Steam API，自己做了一个网站来玩。\n\n虽然没什么技术含量，但是很好的展示了**如何把一个点子变成现实**，所以记录下来。\n\n<!--more-->\n\n## 技能和工具\n\n这个网站非常简单，涉及到的技术只要初步掌握即可实现。\n\n> 以下是我用到的技能和工具，你可以根据自己情况调整\n\n技能：\n\n- Python\n- Node.js\n- 基本的 HTML、CSS 和 JS\n- 基本的 Linux 技能\n- 基本的 Nginx 技能\n- 翻墙能力\n- 会用 GitHub\n\n工具：\n\n- 一台 VPS\n- 一个域名\n- 一个编辑器（我用的 Sublime Text 3）\n\n## 调查\n\n首先去 Google 一下“How much to buy all steam games”，搜到这个网站：[Buy All of Steam](http://buyallofsteam.appspot.com/)，截图如下\n\n![网站截图](http://static.zybuluo.com/numbbbbb/pp7bbnnj7rdzji0614ogz456/1.png)\n\n哇，九万多美元！真不少。\n\n再往下看，最后一次更新时间是 2014 年光棍节。\n\n![ARE YOU KIDDING ME?](http://static.zybuluo.com/numbbbbb/letp7i9nq115kbfiswhhfplg/2.png)\n\n是不是作者在光棍节脱单了所以放弃了 Steam？\n\n继续往下看，网站还给出了计算方法，非常简单：\n\n```python\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nfull_price = 0.0\ndiscounted_price = 0.0\nfor game in games.get_all('US'):\n\tif game.price != 0:\n\t\tdiscounted_price += game.discounted_price\n\t\tfull_price += game.full_price\n```\n\n哇真的好简单！\n\n然后我去看了一下这个`steamapiwrapper`库，\n\n![steamapiwrapper](http://static.zybuluo.com/numbbbbb/uv04h5jc39u6qruk7rngrcrr/3.png)\n\n2 years ago\n\n2 years ago\n\n2 years ago\n\n。\n\n。\n\n。\n\n。\n\n。\n\n。\n\n。\n\n![掀桌](http://static.zybuluo.com/numbbbbb/cqpgoa5p52xl6togf4t0bpnz/4.jpeg)\n\n这就是网站作者自己写的库吧！一定是脱团之后弃坑了吧！！！\n\n好吧，关掉网页，回到 Google 继续往下看。\n\n嗯……没了。\n\n其他的网页都是一些统计性质的文章，Steam 更新频率极高，这类文章基本上是一发表就过时。\n\n怎么办？\n\n作为无所不能的程序员，当然是自己写一个啦！既然两年前能实现，两年后一定也能搞定！\n\n![接受挑战](http://static.zybuluo.com/numbbbbb/xfx3t0tlw9v5phljdjipg4jf/5.png)\n\n看看我们收集到了什么有用的东西：\n\n- 一段计算代码\n- 一个 Steam API 库\n\n那就从这里开始吧。\n\n## 修改代码\n\n> 以下代码**不包含**任何最佳实践，Just For Fun！\n\n首先来看看这段两年前的代码还能否运行，如果能，那我们只要写个网页展示就可以了。\n\n`steamapiwrapper`没有上传到 pip，所以我们只能下载代码到本地。\n\n首先登陆 VPS:\n\n```bash\nssh root@xxx.xxx.xx.x\n```\n> 提示：本文的命令和代码是意识流，重在介绍思想和流程，具体的细节请自行 Google（别百度，百度一下你就被坑）。\n\n然后用`virtualenv`创建 Python 虚拟环境，不影响本机的 Python 配置：\n\n```bash\n$ mkdir /steamtuhao\n$ cd /steamtuhao\n$ pip install virtualenv\n$ virtualenv venv\n$ virtualenv -p /usr/bin/python2.7 venv\n```\n执行完会在根目录下的`steamtuhao`目录中创建一个 Python 虚拟环境，并且指定 Python 版本为 2.7（`steamapiwrapper`基于 Python 2.x 开发）。\n\n然后开启虚拟环境，下载第三方库：\n\n```bash\n$ source venv/bin/activate\n$ git clone git@github.com:naiyt/steamapiwrapper.git\n$ cp -avr steamapiwrapper/steamapiwrapper ./temp\n$ rm -rf steamapiwrapper\n$ mv temp steamapiwrapper\n```\n最后三行是不是看懵了？GitHub 克隆下来的库并不能直接导入 Python 中，需要把里面真正的 Python 包复制出来。所以这里的操作其实是：复制出来我们要用的包、删掉整个项目、重命名包。\n\n最后新建一个文件，把网站中提到的那段代码复制进去：\n\n```python\n# 需要复制的代码\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nfull_price = 0.0\ndiscounted_price = 0.0\nfor game in games.get_all('US'):\n\tif game.price != 0:\n\t\tdiscounted_price += game.discounted_price\n\t\tfull_price += game.full_price\n```\n\n```bash\n$ vim calTotalPrices.py\n# 进入 vim \n# 粘贴上面的代码并保存\n```\n\nOK，运行一下试试：\n\n```bash\n$ python calTotalPrices.py\n```\n\n报错了。\n\n具体的错误信息我忘了保存，大概就是说 JSON 不能解析`None`。打开出错的`SteamGames.py`定位过去看下，发现调用了一个`_open_url`函数，搜索一下这个函数看看…………\n\n没找到。\n\n![掀桌](http://static.zybuluo.com/numbbbbb/cqpgoa5p52xl6togf4t0bpnz/4.jpeg)\n\n这哥们绝对是恋爱了，否则不可能犯这么弱智的错误。\n\n好吧，看上下文，这里应该是请求一个 URL 并解析返回的 JSON 内容。\n\n那我们直接用`requests`这个库就行。\n\n```bash\n$ pip install requests\n```\n\n然后修改`SteamGames.py`文件：\n\n```python\n# 文件头部 import 进来\nimport requests\n\n...\n\n# 把两处 _open_url 都改过来\ndef _get_games_from(self, url):\n        \"\"\"Generator to create the actual game objects\"\"\"\n        page = requests.get(url).json()    # ←第一处\n\n...\n\ndef get_ids_and_names(self):\n        \"\"\"\n        Returns two dicts: one mapping appid->game name, and one game name->appid\n        TODO: Refactor the code so we don't need to seperate dicts\n\n        \"\"\"\n        url = \"http://api.steampowered.com/ISteamApps/GetAppList/v2\"\n        url_info = requests.get(url).json()    # ←第二处\n```\n\nOK，现在再来跑一下看看：\n\n```bash\n$ python calTotalPrices.py\n```\n\n又报错了。\n\n具体的错误信息我没保存（为什么这句话这么眼熟），反正大概意思就是 JSON 不能解析`None`。什么？刚才不就是这个错误吗？！\n\n仔细看了一下，错误位置和上次一样，到底是怎么回事？\n\n回答这个问题之前先来了解下请求 URL 时到底发生了什么：\n\n- 访问 URL\n- 服务器返回 JSON 数据\n- 拿到返回的数据并解析\n\n我们刚才解决的是第一步，访问 URL。现在又出错了，那就说明返回的 JSON 数据有问题。\n\n可以在代码里加一个`print page`看下，果然是`None`，也就是说根本就没拿到数据。\n\n怎么回事呢？我们再`print url`一下，我看到的是这个：\n\n```\nhttp://store.steampowered.com/api/appdetails/?cc=US&appids=5%2C262150%2C7%2C8%2C10%2C20%2C393240%2C30%2C40%2C262190%2C50%2C393270%2C60%2C262210%2C70%2C393290%2C80%2C262230%2C90%2C92%2C262240%2C100%2C393320%2C393330%2C262260&l=english&v=1\n```\n\n这`appids`肯定有问题啊！\n\n`print all_ids`，从里面拿出来一个 id，手动拼接到上面的 URL 中：\n\n```\nhttp://store.steampowered.com/api/appdetails/?appids=218620&cc=US&l=english&v=1\n```\n\n![访问结果](http://static.zybuluo.com/numbbbbb/itesja11wq5cd5d36waojc90/6.png)\n\n拿到了数据，看来就是 URL 拼接时候出问题了。\n\n看下拼接函数：\n\n```python\ndef _create_url(self, appids, cc):\n    \"\"\"Given a list of appids, creates an API url to retrieve them\"\"\"\n    appids = ','.join([str(x) for x in appids])\n    data = {'appids': appids, 'cc': cc, 'l': 'english', 'v': '1'}\n    return \"http://store.steampowered.com/api/appdetails/?{}\".format(urllib.urlencode(data))\n```\n\n为什么要`urlencode`呢？删掉，直接手动拼接：\n\n```python\ndef _create_url(self, appids, cc):\n    \"\"\"Given a list of appids, creates an API url to retrieve them\"\"\"\n    appids = ','.join([str(x) for x in appids])\n    data = (appids, cc, 'english')\n    return \"http://store.steampowered.com/api/appdetails/?appids=%s&cc=%s&l=%s&v=1\" % data\n```\n\n再执行一下，还是报错。\n\n好吧，就是这样的，现在你知道两年前的项目是什么概念了。\n\n刚才我们在浏览器里不是拿到数据了吗？怎么又出问题了？\n\n仔细看下拼接的 URL，发现有个区别：拼接的 URL 里有多个`appid`，我们刚才只试了一个。\n\n修改测试 URL：\n\n```\nhttp://store.steampowered.com/api/appdetails/?appids=218620,441600&cc=US&l=english&v=1\n```\n\n![测试](http://static.zybuluo.com/numbbbbb/mkir67whv2z73jn6svioiznw/7.png)\n\n果然，返回 null。\n\n到底是怎么回事？\n\n再次阅读`steamapiwrapper`的文档，发现作者提到了一篇文章，说他用文章里的方法重构了 API，我们去看看[那篇文章](https://steamdb.info/blog/store-prices-api/)。\n\n打开一看，说的就是我们这个 API 啊！往下翻，看到好多两年前的评论，再往下翻，最底部的一条评论是五个月前的，看看说了什么：\n\n![评论](http://static.zybuluo.com/numbbbbb/5tjif2qijoxk4apy9sobxnda/8.png)\n\n热泪盈眶！兄弟你是个好人啊！！不仅发现了这个问题，还给出了解决方法！\n\n把`&filters=price_overview`加到 URL 结尾看看：\n\n```\nhttp://store.steampowered.com/api/appdetails/?appids=218620,441600&cc=US&l=english&v=1&filters=price_overview\n```\n\n![测试](http://static.zybuluo.com/numbbbbb/0sfgqfbr4xv1wfcdz20e1wsy/9.png)\n\n热泪盈眶 again！数据出来了，而且正是我们想要的价格数据！\n\n这里做个笔记，返回的数据中`currency`表示货币种类，`initial`表示原价，`final`表示折扣价。哎这游戏怎么这么贵？1999 美元？打开 Steam 搜了一下，是 19.99 美元，明白了，这个数字要除以 100 才是实际价格。\n\n> 科普：为什么 Steam 要乘以 100？\n> \n> 在很多语言中 0.1 + 0.1 都不等于 0.2，这是因为计算机本身的设计缺陷，无法准确保存浮点数（也就是小数），因此对浮点数做运算会有误差。最简单的解决办法就是把浮点数变成整数进行运算，最终需要展示时再除回小数。\n> \n> 如果你想了解更多浮点数内容，可以阅读[逼乎上的答案](https://www.zhihu.com/question/20679634)。\n\n下面继续修改代码：\n\n```python\ndef _create_url(self, appids, cc):\n    \"\"\"Given a list of appids, creates an API url to retrieve them\"\"\"\n    appids = ','.join([str(x) for x in appids])\n    data = (appids, cc, 'english')\n    return \"http://store.steampowered.com/api/appdetails/?appids=%s&cc=%s&l=%s&v=1&filters=price_overview\" % data\n```\n\n再次运行，又报错了，错误提示不一样了！可喜可贺。\n\n具体的错误提示我忘了（……），反正大概是说`Game`类初始化时候有问题。\n\n看一下出错位置的代码：\n\n```python\nfor appid in page:\n\tgame = Game(page[appid], appid)\n\tif game.success:\n\t    yield game\n```\n\n这里的`page`是一个解析后的 JSON 内容，也就是说它是一个字典。用`for`循环去遍历的时候，拿到的`appid`是字典的键，传入`Game`类生成实例的时候出错了。跳过去看了一下`Game`类的实现代码，好麻烦，懒得改了，反正已经拿到价格数据，直接返回得了。\n\n```python\ndef _get_games_from(self, url):\n    \"\"\"Generator to create the actual game objects\"\"\"\n    page = requests.get(url).json()\n    for game in page:\n        if page[game]['success'] and page[game]['data']:\n            yield page[game]['data']['price_overview']\n```\n\n再重复一遍，page 是字典，所以要用方括号去获取内容。\n\n测试的时候发现有时候请求成功但是`data`是空，所以`if`中加了一个判断条件。\n\n由于返回的内容改变，我们还需要修改`calTotalPrices.py`里面的代码：\n\n```python\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nfull_price = 0.0\ndiscounted_price = 0.0\nfor game in games.get_all('US'):\n\tif game['initial'] != 0:\n\t\tdiscounted_price += game['final']\n\t\tfull_price += game['initial']\n\t\tprint full_price, discounted_price\n```\n\n再次运行程序，这次没有报错，并且一直在输出价格，大功告成！\n\n这一节写了好长，终于能结束了。\n\n## 验证\n\n代码跑通了，下面就是要检查数据是否正确。\n\n执行：\n\n```bash\n$ python calTotalPrices.py\n```\n\n一开始没问题，过了一会又报错了。\n\n![ARE YOU KIDDING ME?](http://static.zybuluo.com/numbbbbb/letp7i9nq115kbfiswhhfplg/2.png)\n\n不是没问题了吗？\n\n这时候，经验丰富的同学应该已经想到了一种可能性：API 调用频率限制。\n\n没错，Steam 不是慈善家，API 资源不可能给你无限使用。经过一番研究，发现确实是触发了 API 的限制。一旦访问频率过快，Steam 会直接返回 null。\n\n那么 Steam 的限制到底是多少？\n\nGoogle 一番之后，发现 Steam 官方没有任何说明。聪明的网友们自己总结出几条规则：\n\n- 10 秒内最多调用 10 次\n- 5 分钟内最多调用 200 次\n- x 分钟内……\n\n好了好了我明白了，总之一秒调用一次肯定没问题是吧？简单，加个`sleep(1)`：\n\n```python\nimport time\n\n...\n\nfor url in urls:\n    for game in self._get_games_from(url):\n        yield game\n    time.sleep(1)\n```\n\n加完之后，经验丰富的同学应该又想到了另一个问题：要抓多久？\n\n`print len(all_ids)`，大概有 23000 个 id，代码中`self.num = 25`，每次请求查询 25 个，需要查询 23000/25 = 1000 次。每次请求睡眠一秒，那就是 1000 多秒，大概 17 分钟。再加上请求本身需要的时间，可能要几十分钟吧。\n\n看起来也可以接受，不过还能优化吗？\n\n仔细看代码中的注释：\n\n```python\ndef __init__(self,num=None):\n    \"\"\"\n    args:\n    num -- number of games to query per call. The default 150 should work in most cases.\n\n    \"\"\"\n    self.num = 25 if num is None else num\n```\n\n原来默认值是 150 啊，那我们就改成`self.num = 150`，一下快了 6 倍，好开心。\n\n下面就来正式运行一下，看看能否拿到数据：\n\n```bash\n$ nohup python calTotalPrices.py > result &\n```\n\n咦，怎么出来一个`nohup`？这是一个新命令，简单来说就是后台执行。这条命令把输出写到`result`文件中，结尾的`&`会让进程在后台持续运行，哪怕 ssh 断掉进程也不会中止。\n\n然后等就可以了，什么时候程序执行完了，什么时候拿到结果。\n\n等几分钟就跑完了，看看总价：\n\n```bash\n```\n\n哇，真不少啊！\n\n现在已经解决了我的问题，算出了总价。不过我还想做得更多，能不能让其他人也看到这个数据呢？\n\n当然能，做个网站就可以了。\n\n## 展示\n\n现在已经拿到数据了，接下来要做的是展示数据。\n\n我们从用户的角度来思考，他们如何查看数据？\n\n- 访问一个 URL，因此需要**注册一个域名**\n- 请求会发送到后端服务器，因此需要**准备一个 VPS**\n- VPS 需要处理请求，因此需要**配置 Nginx**\n- Nginx 拿到请求之后要反向代理给具体的处理者，因此需要**编写一个 Node.js 程序**\n- Node.js 程序需要返回一个页面，因此需要**编写一个 HTML 页面**\n\nOK，就是这些，涉及到很多东西，但是都不难。具体实施的时候顺序稍有不同，我们一步一步说。\n\n### 注册一个域名\n\n具体教程自己 Google，一般注册域名国内去万网，国外去[GoDaddy](https://www.godaddy.com/)，[Name](https://www.name.com/)。\n\n买好域名之后，把域名解析到自己的 VPS IP 地址就可以了。\n\n### 准备一个 VPS\n\nVPS 是另一个话题，你问我资词哪个？我主要用 Linode 和阿里云。不过要注意，大陆的主机要求域名备案，不备案的域名不能解析到大陆主机。所以如果你域名没备案，去买香港或者新加坡的主机，阿里云有，UCloud 也有，很多家都有。还可以买日本和欧美主机，不过速度比较慢。\n\n### 编写一个 HTML 页面\n\n由于只需要展示数字，所以直接编写一个带占位符的简单页面就可以：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>买下 Steam 所有游戏要花多少钱？</title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1,user-scalable=no\">\n    <style type=\"text/css\">\n    ... 省略，可以直接查看我的网站源码\n    </style>\n</head>\n<body>\n\t<div class=\"main\">\n\t\t<h2>买下Steam所有游戏需要</h2>\n\t\t<h1>${dollar} 或 ￥{cny}</h1>\n\t\t<h4>共有</h4>\n\t\t<h1>{us_number}(美区),{cn_number}(中区)个游戏和 DLC！</h1>\n\t\t<p class=\"date\">更新日期：{date}</p>\n\t\t<p><a href=\"http://numbbbbb.com/2016/02/15/20160215_%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%20Steam%20%E6%B8%B8%E6%88%8F%E6%80%BB%E4%BB%B7%EF%BC%9F/\">原理详解</a></p>\n\t</div>\n\t<div class=\"footer\">\n\t\t<span>\n\t\t\t<a href=\"http://numbbbbb.com\">作者@梁杰_numbbbbb</a>\n\t\t</span>\n\t</div>\n</body>\n</html>\n```\n\n注意到里面有几个奇怪的东西，那些是占位符，Node.js 中会读取 Python 执行出来的结果并替换掉，用户看到的网页显示的是实际数字。\n\n> 你可以根据自己的喜好调整页面样式。\n\n### 编写一个 Node.js 程序\n\n首先配置好 Node.js 环境以及 npm，不会的自行 Google。\n\n这里用到了`hapi`，一个 Node.js 服务端框架，专门用来处理网络请求。还用到了`pm2`，你可以把它理解成一个监控程序，它会帮你监控进程是否正常运行，并在必要的时候重启进程，这样你的服务就不会轻易狗带。我喜欢 ES6，所以需要安装`babel-cli`\n\n```bash\n$ sudo npm install pm2 babel-cli -g\n$ sudo npm install hapi\n```\n\n由于`babel-cli`和`pm2`都需要执行命令行命令，所以全局安装。\n\n下面创建 Node.js 程序：\n\n```bash\n$ touch index.js\n$ vim index.js\n```\n\n拷贝进去下面的代码：\n\n```javascript\n#!/usr/bin/env babel-node\nimport Hapi from 'hapi'\nimport fs from 'fs'\n\nlet server = new Hapi.Server()\nserver.connection({\n  port: 3003,\n  routes: {\n    cors: {\n      origin: ['*']\n    }\n  }\n})\n\nfunction numberWithCommas(x) {\n    var parts = x.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: (request, reply) => {\n    fs.readFile(\"finalResult\", (err, data) => {\n      if (err) throw err\n      let rawData = data.toString().split('\\n')\n      fs.stat(\"finalResult\", (err, data) => {\n        let mtime = data.mtime\n        fs.readFile(\"index.html\", (err, data) => {\n          var result = data.toString()\n          result = result.replace(\"{dollar}\", numberWithCommas(parseInt(rawData[1]) / 100))\n          result = result.replace(\"{cny}\", numberWithCommas(parseInt(rawData[4]) / 100))\n          result = result.replace(\"{us_number}\", numberWithCommas(rawData[2]))\n          result = result.replace(\"{cn_number}\", numberWithCommas(rawData[5]))\n          result = result.replace(\"{date}\", mtime.toISOString())\n          reply(result).code(200)\n        })\n      })\n    })\n  }\n})\n\nserver.start((err) => {\n  console.log(err)\n  console.log('Server running at:', server.info.uri)\n})\n```\n\n再次重复，本文的代码**不包含**任何最佳实践，Just For Fun！\n\n这段代码很简单，启动一个服务器监听 3003 端口，如果有请求过来，就直接读取上面的 HTML 文件，用最新的数据替换掉 HTML 中的占位符，然后返回。\n\n### 配置 Nginx\n\n在 VPS 上安装和配置 Nginx。别问我怎么安装，问 Google。\n\n打开配置文件：\n\n```bash\n$ vim /etc/nginx/nginx.conf\n```\n\n添加一段内容：\n\n```\nserver {\n  listen 80;\n  server_name steamtuhao.com www.steamtuhao;    # ←写你的域名\n\n  location / {\n    proxy_pass http://127.0.0.1:3003;    # ←写你的端口\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;      \n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n注意两个地方，一个是域名，一个是端口。\n\n当然，我们还没说到域名，先往下翻，看域名那一节，搞定域名再来这里配置。\n\n写完之后重启 Nginx：\n\n```bash\n$ service nginx restart\n```\n\n看到输出`[OK]`就表示重启成功，配置没问题。如果不写域名这里会出错。\n\n### Burst Link！\n\n别问我标题什么意思，反正看 Link 也能猜到，就是把各个部分连接起来。\n\n现在已经有了：\n\n- 域名\n- VPS\n- Nginx\n- HTML 页面\n- Node.js 程序\n\n并且域名已经解析到 VPS、Nginx 已经配置好，只差最后一步，用`pm2`运行你的 Node.js 程序。\n\n```bash\n$ pm2 start index.js --interpreter babel-node\n```\n\n由于我使用了 ES6，所以要把解释器设置成`babel-node`。\n\n执行完这一步就可以了，现在用户可以访问你的 URL，请求会被发送到 VPS，VPS 上的 Nginx 接收到请求之后会转发给 Node.js 程序，这个程序会读取数字、替换占位符并返回最终的 HTML。\n\n好了，展示部分已经搞定。下面还有最后一个任务：自动更新数据。\n\n## Final Round!\n\n首先来修改我们的计算脚本，让它把**美元总价**、**人民币总价**、**游戏和 DLC 总数**以及**修改日期**写入`finalResult`文件，一个一行。\n\n```python\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nus_full_price = 0\nus_discounted_price = 0\nus_gameTotal = 0\nfor game in games.get_all('US'):\n\tif game['initial'] != 0:\n\t\tus_gameTotal += 1\n\t\tus_discounted_price += game['final']\n\t\tus_full_price += game['initial']\n\ncn_full_price = 0\ncn_discounted_price = 0\ncn_gameTotal = 0\nfor game in games.get_all('CN'):\n\tif game['initial'] != 0:\n\t\tcn_gameTotal += 1\n\t\tcn_discounted_price += game['final']\n\t\tcn_full_price += game['initial']\n\nprint \"\\n\".join([str(us_full_price), str(us_discounted_price), str(us_gameTotal), str(cn_full_price), str(cn_discounted_price), str(cn_gameTotal)])\n```\n\n我承认上面的代码很蠢，或许下一个版本我会重构，现在嘛，Just For Fun!\n\n分别计算美元和人民币的价格，然后输出。注意输出顺序要和前面的 Node.js 程序对应。\n\n最后写一个 Linux 的 crontab 命令，每天半夜 12 点自动执行一遍这个程序：\n\n```bash\n$ crontab -e\n# 执行之后会打开一个文件，在文件倒数第二行写入以下内容\n24 * * * * cd /steamtuhao && nohup python calTotalPrices.py > finalResult &\n```\n\n这里有个坑，注意，是写到**倒数第二行**，这个文件结尾必须有一个空行！如果写到最后一行无法执行。\n\n是不是很奇怪？我个人认为这是 Linux 的一个脑残之处。执行`man crontab`，手册中有一行：\n\n```\ncron requires that each entry in a crontab end in a newline character. \nIf the last entry in a crontab is missing the newline,\ncron  will  consider the crontab (at least partially) broken and refuse to install it.\n```\n\n这句话的意思是说：最后一行必须是空行，否则最后一个任务无法执行。\n\n没有任何解释，反正就是无法执行。难以想象，一个 21 世纪的 Linux 系统居然连空行问题都处理不了！\n\n无论如何，一定要记住，**crontab 文件结尾必须有空行**。\n\n好了，现在你已经完成了所有步骤，把域名发给你的朋友吧！\n\n## 总结\n\n早晨开始写代码，中午开始写博客，这一切都在一天之内搞定。再次重申，文章中的代码并不好，因为代码本来就不是重点，重点是这个过程带给了我很多乐趣！\n\n我一直觉得编程和写作、绘画一样，是一种创造的过程。我喜欢编程，我可以用它实现我的各种奇思妙想，我很享受这个过程。\n\n希望你也能享受编程。\n\n## 关于我\n\n这一部分是最不重要的，因此放在最后。\n\n如果你真的读到了这里，想必对这个喋喋不休的家伙有些兴趣。\n\n我是梁杰，90 后，职业前端，业余 iOS，业余 Python，翻译过多本书。如果你想了解更多信息，可以访问以下链接：\n\n- [我的博客](http://numbbbbb.com)，最近才开始重建，内容不多，不过绝对有趣\n- [GitHub](https://github.com/numbbbbb)，或许你点开就会发现“哦原来是你！”\n\n## 开源？\n\n当然会开源啦！\n\n不过这个项目的代码太丑，开源出去只会误导新手，所以暂时不开。如果我还有精力和兴趣，会重构甚至重写这个项目，不过现在嘛……我要去休息了。","source":"_posts/20160215_如何计算 Steam 游戏总价？.md","raw":"---\ntitle: 买下 Steam 所有游戏要花多少钱？\n---\n\n先来看效果展示：[买下 Steam 所有游戏要花多少钱？](http://steamtuhao.com)。\n\n## 背景\n\n最近 Steam 玩得比较多，早晨突然想到一个有趣的问题：买下 Steam 所有游戏要花多少钱？\n\n去 Google 了一下，发现国外有个网站做了计算，但是 2014 年底就停止更新了。研究了一下代码和 Steam API，自己做了一个网站来玩。\n\n虽然没什么技术含量，但是很好的展示了**如何把一个点子变成现实**，所以记录下来。\n\n<!--more-->\n\n## 技能和工具\n\n这个网站非常简单，涉及到的技术只要初步掌握即可实现。\n\n> 以下是我用到的技能和工具，你可以根据自己情况调整\n\n技能：\n\n- Python\n- Node.js\n- 基本的 HTML、CSS 和 JS\n- 基本的 Linux 技能\n- 基本的 Nginx 技能\n- 翻墙能力\n- 会用 GitHub\n\n工具：\n\n- 一台 VPS\n- 一个域名\n- 一个编辑器（我用的 Sublime Text 3）\n\n## 调查\n\n首先去 Google 一下“How much to buy all steam games”，搜到这个网站：[Buy All of Steam](http://buyallofsteam.appspot.com/)，截图如下\n\n![网站截图](http://static.zybuluo.com/numbbbbb/pp7bbnnj7rdzji0614ogz456/1.png)\n\n哇，九万多美元！真不少。\n\n再往下看，最后一次更新时间是 2014 年光棍节。\n\n![ARE YOU KIDDING ME?](http://static.zybuluo.com/numbbbbb/letp7i9nq115kbfiswhhfplg/2.png)\n\n是不是作者在光棍节脱单了所以放弃了 Steam？\n\n继续往下看，网站还给出了计算方法，非常简单：\n\n```python\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nfull_price = 0.0\ndiscounted_price = 0.0\nfor game in games.get_all('US'):\n\tif game.price != 0:\n\t\tdiscounted_price += game.discounted_price\n\t\tfull_price += game.full_price\n```\n\n哇真的好简单！\n\n然后我去看了一下这个`steamapiwrapper`库，\n\n![steamapiwrapper](http://static.zybuluo.com/numbbbbb/uv04h5jc39u6qruk7rngrcrr/3.png)\n\n2 years ago\n\n2 years ago\n\n2 years ago\n\n。\n\n。\n\n。\n\n。\n\n。\n\n。\n\n。\n\n![掀桌](http://static.zybuluo.com/numbbbbb/cqpgoa5p52xl6togf4t0bpnz/4.jpeg)\n\n这就是网站作者自己写的库吧！一定是脱团之后弃坑了吧！！！\n\n好吧，关掉网页，回到 Google 继续往下看。\n\n嗯……没了。\n\n其他的网页都是一些统计性质的文章，Steam 更新频率极高，这类文章基本上是一发表就过时。\n\n怎么办？\n\n作为无所不能的程序员，当然是自己写一个啦！既然两年前能实现，两年后一定也能搞定！\n\n![接受挑战](http://static.zybuluo.com/numbbbbb/xfx3t0tlw9v5phljdjipg4jf/5.png)\n\n看看我们收集到了什么有用的东西：\n\n- 一段计算代码\n- 一个 Steam API 库\n\n那就从这里开始吧。\n\n## 修改代码\n\n> 以下代码**不包含**任何最佳实践，Just For Fun！\n\n首先来看看这段两年前的代码还能否运行，如果能，那我们只要写个网页展示就可以了。\n\n`steamapiwrapper`没有上传到 pip，所以我们只能下载代码到本地。\n\n首先登陆 VPS:\n\n```bash\nssh root@xxx.xxx.xx.x\n```\n> 提示：本文的命令和代码是意识流，重在介绍思想和流程，具体的细节请自行 Google（别百度，百度一下你就被坑）。\n\n然后用`virtualenv`创建 Python 虚拟环境，不影响本机的 Python 配置：\n\n```bash\n$ mkdir /steamtuhao\n$ cd /steamtuhao\n$ pip install virtualenv\n$ virtualenv venv\n$ virtualenv -p /usr/bin/python2.7 venv\n```\n执行完会在根目录下的`steamtuhao`目录中创建一个 Python 虚拟环境，并且指定 Python 版本为 2.7（`steamapiwrapper`基于 Python 2.x 开发）。\n\n然后开启虚拟环境，下载第三方库：\n\n```bash\n$ source venv/bin/activate\n$ git clone git@github.com:naiyt/steamapiwrapper.git\n$ cp -avr steamapiwrapper/steamapiwrapper ./temp\n$ rm -rf steamapiwrapper\n$ mv temp steamapiwrapper\n```\n最后三行是不是看懵了？GitHub 克隆下来的库并不能直接导入 Python 中，需要把里面真正的 Python 包复制出来。所以这里的操作其实是：复制出来我们要用的包、删掉整个项目、重命名包。\n\n最后新建一个文件，把网站中提到的那段代码复制进去：\n\n```python\n# 需要复制的代码\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nfull_price = 0.0\ndiscounted_price = 0.0\nfor game in games.get_all('US'):\n\tif game.price != 0:\n\t\tdiscounted_price += game.discounted_price\n\t\tfull_price += game.full_price\n```\n\n```bash\n$ vim calTotalPrices.py\n# 进入 vim \n# 粘贴上面的代码并保存\n```\n\nOK，运行一下试试：\n\n```bash\n$ python calTotalPrices.py\n```\n\n报错了。\n\n具体的错误信息我忘了保存，大概就是说 JSON 不能解析`None`。打开出错的`SteamGames.py`定位过去看下，发现调用了一个`_open_url`函数，搜索一下这个函数看看…………\n\n没找到。\n\n![掀桌](http://static.zybuluo.com/numbbbbb/cqpgoa5p52xl6togf4t0bpnz/4.jpeg)\n\n这哥们绝对是恋爱了，否则不可能犯这么弱智的错误。\n\n好吧，看上下文，这里应该是请求一个 URL 并解析返回的 JSON 内容。\n\n那我们直接用`requests`这个库就行。\n\n```bash\n$ pip install requests\n```\n\n然后修改`SteamGames.py`文件：\n\n```python\n# 文件头部 import 进来\nimport requests\n\n...\n\n# 把两处 _open_url 都改过来\ndef _get_games_from(self, url):\n        \"\"\"Generator to create the actual game objects\"\"\"\n        page = requests.get(url).json()    # ←第一处\n\n...\n\ndef get_ids_and_names(self):\n        \"\"\"\n        Returns two dicts: one mapping appid->game name, and one game name->appid\n        TODO: Refactor the code so we don't need to seperate dicts\n\n        \"\"\"\n        url = \"http://api.steampowered.com/ISteamApps/GetAppList/v2\"\n        url_info = requests.get(url).json()    # ←第二处\n```\n\nOK，现在再来跑一下看看：\n\n```bash\n$ python calTotalPrices.py\n```\n\n又报错了。\n\n具体的错误信息我没保存（为什么这句话这么眼熟），反正大概意思就是 JSON 不能解析`None`。什么？刚才不就是这个错误吗？！\n\n仔细看了一下，错误位置和上次一样，到底是怎么回事？\n\n回答这个问题之前先来了解下请求 URL 时到底发生了什么：\n\n- 访问 URL\n- 服务器返回 JSON 数据\n- 拿到返回的数据并解析\n\n我们刚才解决的是第一步，访问 URL。现在又出错了，那就说明返回的 JSON 数据有问题。\n\n可以在代码里加一个`print page`看下，果然是`None`，也就是说根本就没拿到数据。\n\n怎么回事呢？我们再`print url`一下，我看到的是这个：\n\n```\nhttp://store.steampowered.com/api/appdetails/?cc=US&appids=5%2C262150%2C7%2C8%2C10%2C20%2C393240%2C30%2C40%2C262190%2C50%2C393270%2C60%2C262210%2C70%2C393290%2C80%2C262230%2C90%2C92%2C262240%2C100%2C393320%2C393330%2C262260&l=english&v=1\n```\n\n这`appids`肯定有问题啊！\n\n`print all_ids`，从里面拿出来一个 id，手动拼接到上面的 URL 中：\n\n```\nhttp://store.steampowered.com/api/appdetails/?appids=218620&cc=US&l=english&v=1\n```\n\n![访问结果](http://static.zybuluo.com/numbbbbb/itesja11wq5cd5d36waojc90/6.png)\n\n拿到了数据，看来就是 URL 拼接时候出问题了。\n\n看下拼接函数：\n\n```python\ndef _create_url(self, appids, cc):\n    \"\"\"Given a list of appids, creates an API url to retrieve them\"\"\"\n    appids = ','.join([str(x) for x in appids])\n    data = {'appids': appids, 'cc': cc, 'l': 'english', 'v': '1'}\n    return \"http://store.steampowered.com/api/appdetails/?{}\".format(urllib.urlencode(data))\n```\n\n为什么要`urlencode`呢？删掉，直接手动拼接：\n\n```python\ndef _create_url(self, appids, cc):\n    \"\"\"Given a list of appids, creates an API url to retrieve them\"\"\"\n    appids = ','.join([str(x) for x in appids])\n    data = (appids, cc, 'english')\n    return \"http://store.steampowered.com/api/appdetails/?appids=%s&cc=%s&l=%s&v=1\" % data\n```\n\n再执行一下，还是报错。\n\n好吧，就是这样的，现在你知道两年前的项目是什么概念了。\n\n刚才我们在浏览器里不是拿到数据了吗？怎么又出问题了？\n\n仔细看下拼接的 URL，发现有个区别：拼接的 URL 里有多个`appid`，我们刚才只试了一个。\n\n修改测试 URL：\n\n```\nhttp://store.steampowered.com/api/appdetails/?appids=218620,441600&cc=US&l=english&v=1\n```\n\n![测试](http://static.zybuluo.com/numbbbbb/mkir67whv2z73jn6svioiznw/7.png)\n\n果然，返回 null。\n\n到底是怎么回事？\n\n再次阅读`steamapiwrapper`的文档，发现作者提到了一篇文章，说他用文章里的方法重构了 API，我们去看看[那篇文章](https://steamdb.info/blog/store-prices-api/)。\n\n打开一看，说的就是我们这个 API 啊！往下翻，看到好多两年前的评论，再往下翻，最底部的一条评论是五个月前的，看看说了什么：\n\n![评论](http://static.zybuluo.com/numbbbbb/5tjif2qijoxk4apy9sobxnda/8.png)\n\n热泪盈眶！兄弟你是个好人啊！！不仅发现了这个问题，还给出了解决方法！\n\n把`&filters=price_overview`加到 URL 结尾看看：\n\n```\nhttp://store.steampowered.com/api/appdetails/?appids=218620,441600&cc=US&l=english&v=1&filters=price_overview\n```\n\n![测试](http://static.zybuluo.com/numbbbbb/0sfgqfbr4xv1wfcdz20e1wsy/9.png)\n\n热泪盈眶 again！数据出来了，而且正是我们想要的价格数据！\n\n这里做个笔记，返回的数据中`currency`表示货币种类，`initial`表示原价，`final`表示折扣价。哎这游戏怎么这么贵？1999 美元？打开 Steam 搜了一下，是 19.99 美元，明白了，这个数字要除以 100 才是实际价格。\n\n> 科普：为什么 Steam 要乘以 100？\n> \n> 在很多语言中 0.1 + 0.1 都不等于 0.2，这是因为计算机本身的设计缺陷，无法准确保存浮点数（也就是小数），因此对浮点数做运算会有误差。最简单的解决办法就是把浮点数变成整数进行运算，最终需要展示时再除回小数。\n> \n> 如果你想了解更多浮点数内容，可以阅读[逼乎上的答案](https://www.zhihu.com/question/20679634)。\n\n下面继续修改代码：\n\n```python\ndef _create_url(self, appids, cc):\n    \"\"\"Given a list of appids, creates an API url to retrieve them\"\"\"\n    appids = ','.join([str(x) for x in appids])\n    data = (appids, cc, 'english')\n    return \"http://store.steampowered.com/api/appdetails/?appids=%s&cc=%s&l=%s&v=1&filters=price_overview\" % data\n```\n\n再次运行，又报错了，错误提示不一样了！可喜可贺。\n\n具体的错误提示我忘了（……），反正大概是说`Game`类初始化时候有问题。\n\n看一下出错位置的代码：\n\n```python\nfor appid in page:\n\tgame = Game(page[appid], appid)\n\tif game.success:\n\t    yield game\n```\n\n这里的`page`是一个解析后的 JSON 内容，也就是说它是一个字典。用`for`循环去遍历的时候，拿到的`appid`是字典的键，传入`Game`类生成实例的时候出错了。跳过去看了一下`Game`类的实现代码，好麻烦，懒得改了，反正已经拿到价格数据，直接返回得了。\n\n```python\ndef _get_games_from(self, url):\n    \"\"\"Generator to create the actual game objects\"\"\"\n    page = requests.get(url).json()\n    for game in page:\n        if page[game]['success'] and page[game]['data']:\n            yield page[game]['data']['price_overview']\n```\n\n再重复一遍，page 是字典，所以要用方括号去获取内容。\n\n测试的时候发现有时候请求成功但是`data`是空，所以`if`中加了一个判断条件。\n\n由于返回的内容改变，我们还需要修改`calTotalPrices.py`里面的代码：\n\n```python\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nfull_price = 0.0\ndiscounted_price = 0.0\nfor game in games.get_all('US'):\n\tif game['initial'] != 0:\n\t\tdiscounted_price += game['final']\n\t\tfull_price += game['initial']\n\t\tprint full_price, discounted_price\n```\n\n再次运行程序，这次没有报错，并且一直在输出价格，大功告成！\n\n这一节写了好长，终于能结束了。\n\n## 验证\n\n代码跑通了，下面就是要检查数据是否正确。\n\n执行：\n\n```bash\n$ python calTotalPrices.py\n```\n\n一开始没问题，过了一会又报错了。\n\n![ARE YOU KIDDING ME?](http://static.zybuluo.com/numbbbbb/letp7i9nq115kbfiswhhfplg/2.png)\n\n不是没问题了吗？\n\n这时候，经验丰富的同学应该已经想到了一种可能性：API 调用频率限制。\n\n没错，Steam 不是慈善家，API 资源不可能给你无限使用。经过一番研究，发现确实是触发了 API 的限制。一旦访问频率过快，Steam 会直接返回 null。\n\n那么 Steam 的限制到底是多少？\n\nGoogle 一番之后，发现 Steam 官方没有任何说明。聪明的网友们自己总结出几条规则：\n\n- 10 秒内最多调用 10 次\n- 5 分钟内最多调用 200 次\n- x 分钟内……\n\n好了好了我明白了，总之一秒调用一次肯定没问题是吧？简单，加个`sleep(1)`：\n\n```python\nimport time\n\n...\n\nfor url in urls:\n    for game in self._get_games_from(url):\n        yield game\n    time.sleep(1)\n```\n\n加完之后，经验丰富的同学应该又想到了另一个问题：要抓多久？\n\n`print len(all_ids)`，大概有 23000 个 id，代码中`self.num = 25`，每次请求查询 25 个，需要查询 23000/25 = 1000 次。每次请求睡眠一秒，那就是 1000 多秒，大概 17 分钟。再加上请求本身需要的时间，可能要几十分钟吧。\n\n看起来也可以接受，不过还能优化吗？\n\n仔细看代码中的注释：\n\n```python\ndef __init__(self,num=None):\n    \"\"\"\n    args:\n    num -- number of games to query per call. The default 150 should work in most cases.\n\n    \"\"\"\n    self.num = 25 if num is None else num\n```\n\n原来默认值是 150 啊，那我们就改成`self.num = 150`，一下快了 6 倍，好开心。\n\n下面就来正式运行一下，看看能否拿到数据：\n\n```bash\n$ nohup python calTotalPrices.py > result &\n```\n\n咦，怎么出来一个`nohup`？这是一个新命令，简单来说就是后台执行。这条命令把输出写到`result`文件中，结尾的`&`会让进程在后台持续运行，哪怕 ssh 断掉进程也不会中止。\n\n然后等就可以了，什么时候程序执行完了，什么时候拿到结果。\n\n等几分钟就跑完了，看看总价：\n\n```bash\n```\n\n哇，真不少啊！\n\n现在已经解决了我的问题，算出了总价。不过我还想做得更多，能不能让其他人也看到这个数据呢？\n\n当然能，做个网站就可以了。\n\n## 展示\n\n现在已经拿到数据了，接下来要做的是展示数据。\n\n我们从用户的角度来思考，他们如何查看数据？\n\n- 访问一个 URL，因此需要**注册一个域名**\n- 请求会发送到后端服务器，因此需要**准备一个 VPS**\n- VPS 需要处理请求，因此需要**配置 Nginx**\n- Nginx 拿到请求之后要反向代理给具体的处理者，因此需要**编写一个 Node.js 程序**\n- Node.js 程序需要返回一个页面，因此需要**编写一个 HTML 页面**\n\nOK，就是这些，涉及到很多东西，但是都不难。具体实施的时候顺序稍有不同，我们一步一步说。\n\n### 注册一个域名\n\n具体教程自己 Google，一般注册域名国内去万网，国外去[GoDaddy](https://www.godaddy.com/)，[Name](https://www.name.com/)。\n\n买好域名之后，把域名解析到自己的 VPS IP 地址就可以了。\n\n### 准备一个 VPS\n\nVPS 是另一个话题，你问我资词哪个？我主要用 Linode 和阿里云。不过要注意，大陆的主机要求域名备案，不备案的域名不能解析到大陆主机。所以如果你域名没备案，去买香港或者新加坡的主机，阿里云有，UCloud 也有，很多家都有。还可以买日本和欧美主机，不过速度比较慢。\n\n### 编写一个 HTML 页面\n\n由于只需要展示数字，所以直接编写一个带占位符的简单页面就可以：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>买下 Steam 所有游戏要花多少钱？</title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1,user-scalable=no\">\n    <style type=\"text/css\">\n    ... 省略，可以直接查看我的网站源码\n    </style>\n</head>\n<body>\n\t<div class=\"main\">\n\t\t<h2>买下Steam所有游戏需要</h2>\n\t\t<h1>${dollar} 或 ￥{cny}</h1>\n\t\t<h4>共有</h4>\n\t\t<h1>{us_number}(美区),{cn_number}(中区)个游戏和 DLC！</h1>\n\t\t<p class=\"date\">更新日期：{date}</p>\n\t\t<p><a href=\"http://numbbbbb.com/2016/02/15/20160215_%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%20Steam%20%E6%B8%B8%E6%88%8F%E6%80%BB%E4%BB%B7%EF%BC%9F/\">原理详解</a></p>\n\t</div>\n\t<div class=\"footer\">\n\t\t<span>\n\t\t\t<a href=\"http://numbbbbb.com\">作者@梁杰_numbbbbb</a>\n\t\t</span>\n\t</div>\n</body>\n</html>\n```\n\n注意到里面有几个奇怪的东西，那些是占位符，Node.js 中会读取 Python 执行出来的结果并替换掉，用户看到的网页显示的是实际数字。\n\n> 你可以根据自己的喜好调整页面样式。\n\n### 编写一个 Node.js 程序\n\n首先配置好 Node.js 环境以及 npm，不会的自行 Google。\n\n这里用到了`hapi`，一个 Node.js 服务端框架，专门用来处理网络请求。还用到了`pm2`，你可以把它理解成一个监控程序，它会帮你监控进程是否正常运行，并在必要的时候重启进程，这样你的服务就不会轻易狗带。我喜欢 ES6，所以需要安装`babel-cli`\n\n```bash\n$ sudo npm install pm2 babel-cli -g\n$ sudo npm install hapi\n```\n\n由于`babel-cli`和`pm2`都需要执行命令行命令，所以全局安装。\n\n下面创建 Node.js 程序：\n\n```bash\n$ touch index.js\n$ vim index.js\n```\n\n拷贝进去下面的代码：\n\n```javascript\n#!/usr/bin/env babel-node\nimport Hapi from 'hapi'\nimport fs from 'fs'\n\nlet server = new Hapi.Server()\nserver.connection({\n  port: 3003,\n  routes: {\n    cors: {\n      origin: ['*']\n    }\n  }\n})\n\nfunction numberWithCommas(x) {\n    var parts = x.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: (request, reply) => {\n    fs.readFile(\"finalResult\", (err, data) => {\n      if (err) throw err\n      let rawData = data.toString().split('\\n')\n      fs.stat(\"finalResult\", (err, data) => {\n        let mtime = data.mtime\n        fs.readFile(\"index.html\", (err, data) => {\n          var result = data.toString()\n          result = result.replace(\"{dollar}\", numberWithCommas(parseInt(rawData[1]) / 100))\n          result = result.replace(\"{cny}\", numberWithCommas(parseInt(rawData[4]) / 100))\n          result = result.replace(\"{us_number}\", numberWithCommas(rawData[2]))\n          result = result.replace(\"{cn_number}\", numberWithCommas(rawData[5]))\n          result = result.replace(\"{date}\", mtime.toISOString())\n          reply(result).code(200)\n        })\n      })\n    })\n  }\n})\n\nserver.start((err) => {\n  console.log(err)\n  console.log('Server running at:', server.info.uri)\n})\n```\n\n再次重复，本文的代码**不包含**任何最佳实践，Just For Fun！\n\n这段代码很简单，启动一个服务器监听 3003 端口，如果有请求过来，就直接读取上面的 HTML 文件，用最新的数据替换掉 HTML 中的占位符，然后返回。\n\n### 配置 Nginx\n\n在 VPS 上安装和配置 Nginx。别问我怎么安装，问 Google。\n\n打开配置文件：\n\n```bash\n$ vim /etc/nginx/nginx.conf\n```\n\n添加一段内容：\n\n```\nserver {\n  listen 80;\n  server_name steamtuhao.com www.steamtuhao;    # ←写你的域名\n\n  location / {\n    proxy_pass http://127.0.0.1:3003;    # ←写你的端口\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;      \n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n注意两个地方，一个是域名，一个是端口。\n\n当然，我们还没说到域名，先往下翻，看域名那一节，搞定域名再来这里配置。\n\n写完之后重启 Nginx：\n\n```bash\n$ service nginx restart\n```\n\n看到输出`[OK]`就表示重启成功，配置没问题。如果不写域名这里会出错。\n\n### Burst Link！\n\n别问我标题什么意思，反正看 Link 也能猜到，就是把各个部分连接起来。\n\n现在已经有了：\n\n- 域名\n- VPS\n- Nginx\n- HTML 页面\n- Node.js 程序\n\n并且域名已经解析到 VPS、Nginx 已经配置好，只差最后一步，用`pm2`运行你的 Node.js 程序。\n\n```bash\n$ pm2 start index.js --interpreter babel-node\n```\n\n由于我使用了 ES6，所以要把解释器设置成`babel-node`。\n\n执行完这一步就可以了，现在用户可以访问你的 URL，请求会被发送到 VPS，VPS 上的 Nginx 接收到请求之后会转发给 Node.js 程序，这个程序会读取数字、替换占位符并返回最终的 HTML。\n\n好了，展示部分已经搞定。下面还有最后一个任务：自动更新数据。\n\n## Final Round!\n\n首先来修改我们的计算脚本，让它把**美元总价**、**人民币总价**、**游戏和 DLC 总数**以及**修改日期**写入`finalResult`文件，一个一行。\n\n```python\nfrom steamapiwrapper.SteamGames import Games\ngames = Games()\nus_full_price = 0\nus_discounted_price = 0\nus_gameTotal = 0\nfor game in games.get_all('US'):\n\tif game['initial'] != 0:\n\t\tus_gameTotal += 1\n\t\tus_discounted_price += game['final']\n\t\tus_full_price += game['initial']\n\ncn_full_price = 0\ncn_discounted_price = 0\ncn_gameTotal = 0\nfor game in games.get_all('CN'):\n\tif game['initial'] != 0:\n\t\tcn_gameTotal += 1\n\t\tcn_discounted_price += game['final']\n\t\tcn_full_price += game['initial']\n\nprint \"\\n\".join([str(us_full_price), str(us_discounted_price), str(us_gameTotal), str(cn_full_price), str(cn_discounted_price), str(cn_gameTotal)])\n```\n\n我承认上面的代码很蠢，或许下一个版本我会重构，现在嘛，Just For Fun!\n\n分别计算美元和人民币的价格，然后输出。注意输出顺序要和前面的 Node.js 程序对应。\n\n最后写一个 Linux 的 crontab 命令，每天半夜 12 点自动执行一遍这个程序：\n\n```bash\n$ crontab -e\n# 执行之后会打开一个文件，在文件倒数第二行写入以下内容\n24 * * * * cd /steamtuhao && nohup python calTotalPrices.py > finalResult &\n```\n\n这里有个坑，注意，是写到**倒数第二行**，这个文件结尾必须有一个空行！如果写到最后一行无法执行。\n\n是不是很奇怪？我个人认为这是 Linux 的一个脑残之处。执行`man crontab`，手册中有一行：\n\n```\ncron requires that each entry in a crontab end in a newline character. \nIf the last entry in a crontab is missing the newline,\ncron  will  consider the crontab (at least partially) broken and refuse to install it.\n```\n\n这句话的意思是说：最后一行必须是空行，否则最后一个任务无法执行。\n\n没有任何解释，反正就是无法执行。难以想象，一个 21 世纪的 Linux 系统居然连空行问题都处理不了！\n\n无论如何，一定要记住，**crontab 文件结尾必须有空行**。\n\n好了，现在你已经完成了所有步骤，把域名发给你的朋友吧！\n\n## 总结\n\n早晨开始写代码，中午开始写博客，这一切都在一天之内搞定。再次重申，文章中的代码并不好，因为代码本来就不是重点，重点是这个过程带给了我很多乐趣！\n\n我一直觉得编程和写作、绘画一样，是一种创造的过程。我喜欢编程，我可以用它实现我的各种奇思妙想，我很享受这个过程。\n\n希望你也能享受编程。\n\n## 关于我\n\n这一部分是最不重要的，因此放在最后。\n\n如果你真的读到了这里，想必对这个喋喋不休的家伙有些兴趣。\n\n我是梁杰，90 后，职业前端，业余 iOS，业余 Python，翻译过多本书。如果你想了解更多信息，可以访问以下链接：\n\n- [我的博客](http://numbbbbb.com)，最近才开始重建，内容不多，不过绝对有趣\n- [GitHub](https://github.com/numbbbbb)，或许你点开就会发现“哦原来是你！”\n\n## 开源？\n\n当然会开源啦！\n\n不过这个项目的代码太丑，开源出去只会误导新手，所以暂时不开。如果我还有精力和兴趣，会重构甚至重写这个项目，不过现在嘛……我要去休息了。","slug":"20160215_如何计算 Steam 游戏总价？","published":1,"date":"2016-02-15T08:10:06.803Z","updated":"2016-02-15T08:10:06.803Z","_id":"ciknp7rg50000f9xnm9lk8mlp","comments":1,"layout":"post","photos":[],"link":""},{"title":"Hello World","_content":"\n等了一个多月，域名备案终于搞定，新个人网站启用。\n\n# 为什么要开个人网站？\n\n之前有一个 WordPress 搭建的网站，只写了几篇文章，自从开始 [Swift 文档翻译](https://github.com/numbbbbb/the-swift-programming-language-in-chinese)之后就没有再更新过。\n\n最近读了一本书《Technical Blogging》，读完之后萌生了新想法：重新建立个人网站。\n\n<!--more-->\n\n总结起来，建立个人网站的目的是：\n\n- 练习写作\n- 记录思想\n- 提高声望\n\n# 准备怎么做？\n\n[《Technical Blogging》](https://pragprog.com/book/actb/technical-blogging)是一本非常棒的书，从起名到定位到运营到赚钱，详细讲解了技术博客的方方面面。我在阅读的过程中做了大量笔记，我自己也会按照书中内容进行实践。具体的笔记内容会整理之后发布上来。\n\n[《The Book on Writing》](http://www.amazon.com/Book-Writing-Ultimate-Guide-Well/dp/0989236706/)是一本教你写作的书，介绍了非常多有用的小技巧。我正在阅读这本书，并在实践中掌握这些技巧。\n\n# 这个博客用到的技术\n\n1. [阿里云 VPS，Ubuntu 系统](http://www.aliyun.com)：个人感觉并没有大家说的那么烂，国内的个人网站，够用\n2. [万网域名](http://wanwang.aliyun.com)\n3. [Hexo](https://hexo.io)：静态网站生成器\n4. [apollo 模板](https://github.com/pinggod/hexo-theme-apollo)：Hexo 的模板，风格来自 Vue.js 的文档，我很喜欢\n5. [Nginx](http://nginx.org/en/)：反向代理服务器\n6. [MacDown](http://macdown.uranusjr.com/)：Markdown 编辑器","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\n等了一个多月，域名备案终于搞定，新个人网站启用。\n\n# 为什么要开个人网站？\n\n之前有一个 WordPress 搭建的网站，只写了几篇文章，自从开始 [Swift 文档翻译](https://github.com/numbbbbb/the-swift-programming-language-in-chinese)之后就没有再更新过。\n\n最近读了一本书《Technical Blogging》，读完之后萌生了新想法：重新建立个人网站。\n\n<!--more-->\n\n总结起来，建立个人网站的目的是：\n\n- 练习写作\n- 记录思想\n- 提高声望\n\n# 准备怎么做？\n\n[《Technical Blogging》](https://pragprog.com/book/actb/technical-blogging)是一本非常棒的书，从起名到定位到运营到赚钱，详细讲解了技术博客的方方面面。我在阅读的过程中做了大量笔记，我自己也会按照书中内容进行实践。具体的笔记内容会整理之后发布上来。\n\n[《The Book on Writing》](http://www.amazon.com/Book-Writing-Ultimate-Guide-Well/dp/0989236706/)是一本教你写作的书，介绍了非常多有用的小技巧。我正在阅读这本书，并在实践中掌握这些技巧。\n\n# 这个博客用到的技术\n\n1. [阿里云 VPS，Ubuntu 系统](http://www.aliyun.com)：个人感觉并没有大家说的那么烂，国内的个人网站，够用\n2. [万网域名](http://wanwang.aliyun.com)\n3. [Hexo](https://hexo.io)：静态网站生成器\n4. [apollo 模板](https://github.com/pinggod/hexo-theme-apollo)：Hexo 的模板，风格来自 Vue.js 的文档，我很喜欢\n5. [Nginx](http://nginx.org/en/)：反向代理服务器\n6. [MacDown](http://macdown.uranusjr.com/)：Markdown 编辑器","slug":"hello-world","published":1,"date":"2016-01-14T10:22:05.221Z","updated":"2016-01-14T10:22:05.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciknp7rgh0001f9xndocanyft"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}